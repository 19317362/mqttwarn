# Logging
import logging
loglevel = logging.DEBUG
logformat = '%(asctime)-15s %(module)s %(message)s'

# MQTT Broker
broker = 'localhost'
port = 1883
username = None
password = None
lwt = 'lwt/mqtt2pushover'        # Where the MQTT LWT will be publied to. Ignore if None

# List of services we will be using. Omit services you won't be using
# This loads the respective service plugins from the services/ directory
services = [ 'file', 'smtp', 'pushover', 'osxnotify' ]

# Each service (for example, called SAMPLE) requires the definition of
# two dicts:
#        SAMPLE_config        contains configuration for the service
#        SAMPLE_targets        defines the targets for each service

file_config  = {
    'append_newline'   : True,
}
file_targets = {
    'f01'           : ['/tmp/f.01'],
    'log-me'        : ['/tmp/log.me'],
}

# Outgoing MQTT publishes
mqtt_config = {
    'host'       : 'localhost',
    'port'       : 1883,
    'qos'        : 0,
    'retain'     : False,
#    'username'	 : "jane",
#    'password'   : "secret",
}
mqtt_targets = {
    'alerts'    : [ 'test/this1' ],
}

# Twitter
twitter_config        = None                # This service requires no configuration
twitter_targets = {
  'janejol'   :  [ 'vvvvvvvvvvvvvvvvvvvvvv',                              # consumer_key
                   'wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww',          # consumer_secret
                   'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',  # access_token_key
                   'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'           # access_token_secret
                  ],
}

# Pushover.net user/app keys. Each element defines an "application"
# which is associated with one pushover.net userkey and one appkey.

pushover_config  = None    # This service requires no configuration
pushover_targets = {
    'nagios'     : ['userkey1', 'appkey1'],
    'alerts'     : ['userkey2', 'appkey2'],
    'tracking'   : ['userkey1', 'appkey2'],
    'extraphone' : ['userkey2', 'appkey3'],
}

# Redis PUB
redispub_config = {
    'host'    : 'localhost',
    'port'    : 6379,
}
redispub_targets = {
    'r1'      : [ 'channel-1' ],
}

http_config = {
   'timeout'  : 60,
}
http_targets = {
                #method     #URL
    'get1'    : [ "get",    "http://localhost/~jpm/mqttwarn.php?", { 'q': '{name}', 'isod' : '{_dtiso}', 'xx': 'yy' } ],
    'post1'    : [ "post",    "http://localhost/~jpm/mqttwarn.php?r={_dtepoch}", { 'q': '{name}', 'isod' : '{_dtiso}', 'xx': 'yy' } ],
}

# SQLite3
sqlite_config = None
sqlite_targets = {
                   #path        #tablename
  'demotable' : [ '/tmp/m.db',  'mqttwarn'  ],
}

# Mail (SMTP) recipients
smtp_config = {
    'server'    : 'localhost:25',
    'sender'    : "mqttwarn <jpm@localhost>",
    'username'  : None,
    'password'  : None,
    'starttls'  : False,
}
smtp_targets = {
    'localj'     : [ 'jpm@localhost' ],
    'special'    : [ 'ben@gmail', 'suzie@example.net' ],
}

# Prowl
prowl_config = None             # This service requires no configuration
prowl_targets = {
                     # application key                           # app name
    'pjpm'      :  [ 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 'SuperAPP' ],
}

# Pushbullet
pushbullet_config = None
pushbullet_targets = {
                   # API KEY                  device ID
    'warnme'   : [ 'xxxxxxxxxxxxxxxxxxxxxxx', 'yyyyyy' ],
}

# OS X notification via terminal
# The targets are used as application names
osxnotify_config = None
osxnotify_targets = {
    'shell' :                 [ None ],
    }

# XBMC hosts (<ipaddress>:<port>)
xmbc_config        = None
xbmc_targets = {
    'master'     : '192.168.1.40:8080',
    'living'     : '192.168.1.41:80'
}

# Maps MQTT topics to "targets" For example, the `monitoring/icinga/#'
# topic maps to the `pushover:nagios' application which in turn (see above), maps to
# the `userkey1' and `appkey1' combinations. Any message published to
# `owntracks/jpm/xx' will be pushed to 'pushover:tracking' AND 'smtp:localj'
# Topic wildcards (+ and #) are supported.
#
# Used by: all services

topicmap = {
    'monitoring/icinga/#'     : ['pushover:nagios'],
    'notification/warn'       : ['pushover:alerts'],
    'owntracks/jpm/+'         : ['pushover:tracking', 'smtp:localj'],
    'home/monitoring/alert/+' : ['twitter:janejol', 'smtp:nagios', 'prowl:one'],
}

# MQTT topic -> notification title (default: None if not configured, meaning
# the title is whatever is specified for the appropriate service.
# Topic wildcards (+ and #) are supported.
#
# Used by: pushover (title), smtp (subject), prowl, pushbullet

titlemap = {
    'monitoring/icinga/#'   : 'Info',
    'notification/warn'     : 'Warning',
    'notification/error'    : 'Error'
}

# MQTT topic -> notification priority (default: -1 if not configured here)
# Topic wildcards (+ and #) are supported.
#
# Used by: pushover

prioritymap = {
    'notification/info'    : -1,
    'notification/warn'    : 0,
    'monitoring/icinga/#'  : 1
}

# MQTT topic -> message formatting map. If a message for a particular
# topic defined here is received, we use this format string to
# transform the incoming payload into the outgoing "message". In addition,
# we attempt to decode the incoming payload as JSON; if that is
# successful, the JSON keys are merged into other keys and may be used
# for message formatting. ++NOTE++: if the message fmt string contains
# formatting elements which aren't in the payload, formatting will fail
# and the message is output as it arrived.
# * all
formatmap = {
    'file/11'                 :  '-->{payload}<--\n',
    'owntracks/jane/phone'    :  '{topic} == lat={lat}, lon={lon} desc={desc}\n',
    'osx/json'                :  "I'll have a {fruit} if it costs {price}",
}

